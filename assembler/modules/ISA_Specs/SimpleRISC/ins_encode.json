 { "TODO": "fix limits",
  "add": [
    {
      "opcode": "0b00000",
      "semantics": "Stores <R2> + <R3> in <R1>",
      "notes": "May set the overflow flag. Upper limit is 65536",
      "syntax": "ADD <R1> <R2> <R3>",
      "type": "A0"
    },
    {
      "opcode": "0b00000",
      "semantics": "Stores <R2> + <Imm> in <R1>",
      "notes": "May set the overflow flag. Upper limit is 65536",
      "syntax": "ADD <R1> <R2> $<Imm>",
      "type": "A1"
    }
  ],
  "sub": [
    {
      "opcode": "0b00001",
      "semantics": "Stores <R2> - <R3> in <R1>.",
      "notes": "May set the overflow flag. Lower Limit is 0",
      "syntax": "SUB <R1> <R2> <R3>",
      "type": "A0"
    },
    {
      "opcode": "0b00001",
      "semantics": "Stores <R2> - $<Imm> in <R1>.",
      "notes": "May set the overflow flag. Lower Limit is 0",
      "syntax": "SUB <R1> <R2> $<Imm>",
      "type": "A1"
    }
  ],
  "mov": [
    {
      "opcode": "0b00010",
      "semantics": "Copies the value of $<Imm> into <R1>.",
      "notes": "<Imm> must be an 8-bit value.",
      "syntax": "MOV <R1> $<Imm>",
      "type": "C1"
    },
    {
      "opcode": "0b00010",
      "semantics": "Copies the value of <R2> into <R1>.",
      "notes": "Special-use registers can be read from, but not written into.",
      "syntax": "MOV <R1> <R2>",
      "type": "C0"
    }
  ],
  "ld": [
    {
      "opcode": "0b00100",
      "semantics": "Loads the value from memory address <ADDR> to <R1>.",
      "notes": "Memory address has a cap of 512. Avoid messing with instructions in the memory.",
      "syntax": "LD <R1> <ADDR>",
      "type": "D"
    },
    {
      "opcode": "0b00100",
      "semantics": "Loads the value from memory address <ADDR> to <R1>, at an offset of <R2>.",
      "notes": "Memory address has a cap of 512. Avoid messing with instructions in the memory.<ADDR> will be treated as 0 if left blank",
      "syntax": "LD <R1> <ADDR>[<R2>]",
      "type": "D"
    }
  ],
  "st": [
    {
      "opcode": "0b00101",
      "semantics": "Stores the value in <R1> at the memory address <ADDR>.",
      "notes": "Memory address has a cap of 512. Avoid messing with instructions in the memory.",
      "syntax": "ST <R1> <ADDR>",
      "type": "D"
    },
    {
      "opcode": "0b00101",
      "semantics": "Stores the value in <R1> at the memory address <ADDR>, at an offset of <R2>.",
      "notes": "Memory address has a cap of 512. Avoid messing with instructions in the memory.",
      "syntax": "ST <R1> <ADDR>[<R2>]",
      "type": "D"
    }
  ],
  "mul": [
    {
      "opcode": "0b00110",
      "semantics": "Stores <R2> * <R3> in R1.",
      "notes": "May set the overflow flag. Upper limit is 65536.",
      "syntax": "MUL <R1> <R2> <R3>",
      "type": "A"
    }
  ],
  "div": [
    {
      "opcode": "0b00111",
      "semantics": "Performs <R3> / <R4>. Stores the quotient in R0 and the remainder in R1.",
      "syntax": "DIV <R3> <R4>",
      "type": "C"
    }
  ],
  "rs": [
    {
      "opcode": "0b01000",
      "semantics": "Right shifts <R1> by $<Imm>, where Imm is an 8 bit value.",
      "syntax": "RS <R1> $<Imm>",
      "type": "B"
    }
  ],
  "ls": [
    {
      "opcode": "0b01001",
      "semantics": "Left shifts <R1> by $<Imm>, where Imm is an 8 bit value.",
      "syntax": "RS <R1> $<Imm>",
      "type": "B"
    }
  ],
  "xor": [
    {
      "opcode": "0b01010",
      "semantics": "Performs bitwise XOR of <R2> and <R3>. Stores the result in <R1>.",
      "syntax": "XOR <R1> <R2> <R3>",
      "type": "A"
    }
  ],
  "or": [
    {
      "opcode": "0b01011",
      "semantics": "Performs bitwise OR of <R2> and <R3>. Stores the result in <R1>. ",
      "syntax": "OR <R1> <R2> <R3>",
      "type": "A"
    }
  ],
  "and": [
    {
      "opcode": "0b01100",
      "semantics": "Performs bitwise AND of <R2> and <R3>. Stores the result in <R1>. ",
      "syntax": "AND <R1> <R2> <R3>",
      "type": "A"
    }
  ],
  "not": [
    {
      "opcode": "0b01101",
      "semantics": "Performs bitwise NOT of <R2>. Stores the result in <R1>.",
      "syntax": "NOT <R1> <R2>",
      "type": "C"
    }
  ],
  "cmp": [
    {
      "opcode": "0b01110",
      "semantics": "Compares <R1> and <R2> and sets up the FLAGS register.",
      "syntax": "CMP <R1> <R2>",
      "type": "C"
    }
  ],
  "jmp": [
    {
      "opcode": "0b01111",
      "semantics": "Jumps unconditionally to <address>",
      "syntax": "jmp <address>",
      "type": "E"
    }
  ],
  "jlt": [
    {
      "opcode": "0b10000",
      "semantics": "Jumps to <address> if the less than flag is set in the FLAGS register.",
      "syntax": "jlt <address>",
      "type": "E"
    }
  ],
  "jgt": [
    {
      "opcode": "0b10001",
      "semantics": "Jumps to <address> if the greater than flag is set in the FLAGS register.",
      "syntax": "jgt <address>",
      "type": "E"
    }
  ],
  "je": [
    {
      "opcode": "0b10010",
      "semantics": "Jumps to <address> if the equality flag is set in the FLAGS register.",
      "notes": "",
      "syntax": "je <address>",
      "type": "E"
    }
  ],
  "hlt": [
    {
      "opcode": "0b10011",
      "semantics": "Stops the execution of the code.",
      "notes": "Any lines after this instruction will not be read. Can only be present at the end of a program [blank lines excluded]",
      "syntax": "hlt",
      "type": "F"
    }
  ]
}
