{
  "add": {
    "opcode": "0110011",
    "funct3": "000",
    "funct7": "00000",
    "semantics": "Stores <RS1> + <RS2> in <RD>",
    "notes": "May set the overflow flag. Upper limit is 65536 (?)",
    "syntax": "ADD <RD> <RS1> <RS2>",
    "type": "R"
  },
  "sub": {
    "opcode": "0110011",
    "funct3": "000",
    "funct7": "01000",
    "semantics": "Stores <RS1> - <RS2> in <RD>.",
    "notes": "May set the overflow flag. Lower Limit is 0 (?)",
    "syntax": "SUB <RD> <RS1> <RS2>",
    "type": "R"
  },
  "addi": {
    "opcode": "0010011",
    "funct3": "000",
    "semantics": "Stores <RS1> + <Imm> in <RD>",
    "notes": "May set the overflow flag. Upper limit is 65536 (?)",
    "syntax": "ADDI <RD> <RS1> <Imm>",
    "type": "I"
  },
  "lw": {
    "opcode": "0000011",
    "funct3": "010",
    "semantics": "Loads the value from memory address <RS1> + <Imm> to <RD>.",
    "notes": "Memory address has a cap of 512. Avoid messing with instructions in the memory.",
    "syntax": "LD <RD> <RS1> <Imm>",
    "type": "I"
  },
  "sw": {
    "opcode": "0100011",
    "funct3": "010",
    "semantics": "Stores the value to memory address <RS2> + <Imm> from <RS1>.",
    "notes": "Memory address has a cap of 512. Avoid messing with instructions in the memory.",
    "syntax": "SW <RS1> <RS2> <Imm>",
    "type": "S"
  },
  "sra": {
    "opcode": "0110011",
    "funct3": "101",
    "funct7": "01000",
    "semantics": "Right shifts <RS1> by <RS2>, and stores it to <RD>",
    "syntax": "SRA <RD> <RS1> <RS2>",
    "type": "R"
  },
  "sll": {
    "opcode": "0110011",
    "funct3": "001",
    "funct7": "00000",
    "semantics": "Left shifts <RS1> by <RS2>, and stores it to <RD>",
    "syntax": "SLL <RD> <RS1> <RS2>",
    "type": "R"
  },
  "or": {
    "opcode": "0110011",
    "funct3": "110",
    "funct7": "00000",
    "semantics": "Performs bitwise OR of <RS1> and <RS2>. Stores the result in <RD>. ",
    "syntax": "OR <RD> <RS1> <RS2>",
    "type": "R"
  },
  "and": {
    "opcode": "0110011",
    "funct3": "111",
    "funct7": "00000",
    "semantics": "Performs bitwise AND of <RS1> and <RS2>. Stores the result in <RD>. ",
    "syntax": "AND <RD> <RS1> <RS2>",
    "type": "R"
  },
  "beq": {
    "opcode": "1100011",
    "funct3": "000",
    "semantics": "Jumps by offset <Imm> if <RS1> and <RS2>",
    "notes": "",
    "syntax": "beq <RS1> <RS2> <address>",
    "type": "SB"
  }
}
